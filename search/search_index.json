{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"CRAWLING \u00b6 Apa itu web crawling ? Dikutip dari Totally Tech , web crawling adalah proses di mana search engine menemukan konten yang di- update di sebuah situs atau halaman baru, perubahan situs, atau link yang mati. Adapun menurut Moz , web crawling adalah proses di mana mesin pencari mengirimkan tim robot ( crawler atau spider ) untuk menemukan konten-konten baru dan konten yang telah di- update. code untuk scrapy \u00b6 import scrapy class QuotesSpider ( scrapy . Spider ): name = \"quotes\" def start_requests ( self ): \u200b urls = [ \u200b 'https://ekbis.sindonews.com/' \u200b ] \u200b for url in urls : \u200b yield scrapy . Request ( url = url , callback = self . parse ) def parse ( self , response ): \u200b \\ # print(response.url) \u200b for i in range ( 0 , 30 ): \u200b for data in response . css ( 'body > div:nth-child(5) > section > div.grid_24 > div.homelist-new > ul' ): \u200b yield { \u200b 'judul' : data . css ( 'li.latest-event.latest-track-' + str ( i ) + ' > div.homelist-box > div.homelist-title > a::text' ) . extract (), \u200b 'isi' : data . css ( 'li.latest-event.latest-track-' + str ( i ) + '> div.homelist-box > div.homelist-desc::text' ) . extract () \u200b } IMPORT MODULE import library yang dibutuhkan # data visualisation and manipulation import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib import style import seaborn as sns #configure # sets matplotlib to inline and displays graphs below the corressponding cell. % matplotlib inline style . use ( 'fivethirtyeight' ) sns . set ( style = 'whitegrid' , color_codes = True ) #import nltk import nltk nltk . download ( 'stopwords' ) from nltk.corpus import stopwords from nltk.tokenize import word_tokenize , sent_tokenize #preprocessing from nltk.corpus import stopwords #stopwords from nltk import word_tokenize , sent_tokenize # tokenizing from nltk.stem import PorterStemmer , LancasterStemmer # using the Porter Stemmer and Lancaster Stemmer and others from nltk.stem.snowball import SnowballStemmer from nltk.stem import WordNetLemmatizer # lammatizer from WordNet # for named entity recognition (NER) from nltk import ne_chunk # vectorizers for creating the document-term-matrix (DTM) from sklearn.feature_extraction.text import TfidfVectorizer , CountVectorizer #stop-words stop_words = set ( nltk . corpus . stopwords . words ( 'indonesian' )) Load DataSet \u00b6 Tahap Processing menggunakan data crawling df = pd . read_csv ( 'tika.csv' ) df . head () Berikut untuk code tabel yang tidak digunakan # drop the publish date. df . drop ([ 'judul' ], axis = 1 , inplace = True ) df . head ( 30 ) Clean Data and Processing Data Berikut code untuk membersihkan data dari angka, tanda baca dll import string import re #regex library # import word_tokenize & FreqDist from NLTK from nltk.tokenize import word_tokenize from nltk.probability import FreqDist #remove number def remove_number ( text ): return re . sub ( r \"\\d+\" , \"\" , text ) df [ 'hapus angka' ] = df [ 'isi' ] . apply ( remove_number ) df . head ( 10 ) def clean_text ( headline ): le = WordNetLemmatizer () word_tokens = word_tokenize ( headline ) tokens = [ le . lemmatize ( w ) for w in word_tokens if w not in stop_words and len ( w ) > 3 ] cleaned_text = \" \" . join ( tokens ) return cleaned_text","title":"Turunan Numerik"},{"location":"#crawling","text":"Apa itu web crawling ? Dikutip dari Totally Tech , web crawling adalah proses di mana search engine menemukan konten yang di- update di sebuah situs atau halaman baru, perubahan situs, atau link yang mati. Adapun menurut Moz , web crawling adalah proses di mana mesin pencari mengirimkan tim robot ( crawler atau spider ) untuk menemukan konten-konten baru dan konten yang telah di- update.","title":"CRAWLING"},{"location":"#code_untuk_scrapy","text":"import scrapy class QuotesSpider ( scrapy . Spider ): name = \"quotes\" def start_requests ( self ): \u200b urls = [ \u200b 'https://ekbis.sindonews.com/' \u200b ] \u200b for url in urls : \u200b yield scrapy . Request ( url = url , callback = self . parse ) def parse ( self , response ): \u200b \\ # print(response.url) \u200b for i in range ( 0 , 30 ): \u200b for data in response . css ( 'body > div:nth-child(5) > section > div.grid_24 > div.homelist-new > ul' ): \u200b yield { \u200b 'judul' : data . css ( 'li.latest-event.latest-track-' + str ( i ) + ' > div.homelist-box > div.homelist-title > a::text' ) . extract (), \u200b 'isi' : data . css ( 'li.latest-event.latest-track-' + str ( i ) + '> div.homelist-box > div.homelist-desc::text' ) . extract () \u200b } IMPORT MODULE import library yang dibutuhkan # data visualisation and manipulation import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib import style import seaborn as sns #configure # sets matplotlib to inline and displays graphs below the corressponding cell. % matplotlib inline style . use ( 'fivethirtyeight' ) sns . set ( style = 'whitegrid' , color_codes = True ) #import nltk import nltk nltk . download ( 'stopwords' ) from nltk.corpus import stopwords from nltk.tokenize import word_tokenize , sent_tokenize #preprocessing from nltk.corpus import stopwords #stopwords from nltk import word_tokenize , sent_tokenize # tokenizing from nltk.stem import PorterStemmer , LancasterStemmer # using the Porter Stemmer and Lancaster Stemmer and others from nltk.stem.snowball import SnowballStemmer from nltk.stem import WordNetLemmatizer # lammatizer from WordNet # for named entity recognition (NER) from nltk import ne_chunk # vectorizers for creating the document-term-matrix (DTM) from sklearn.feature_extraction.text import TfidfVectorizer , CountVectorizer #stop-words stop_words = set ( nltk . corpus . stopwords . words ( 'indonesian' ))","title":"code untuk scrapy"},{"location":"#load_dataset","text":"Tahap Processing menggunakan data crawling df = pd . read_csv ( 'tika.csv' ) df . head () Berikut untuk code tabel yang tidak digunakan # drop the publish date. df . drop ([ 'judul' ], axis = 1 , inplace = True ) df . head ( 30 ) Clean Data and Processing Data Berikut code untuk membersihkan data dari angka, tanda baca dll import string import re #regex library # import word_tokenize & FreqDist from NLTK from nltk.tokenize import word_tokenize from nltk.probability import FreqDist #remove number def remove_number ( text ): return re . sub ( r \"\\d+\" , \"\" , text ) df [ 'hapus angka' ] = df [ 'isi' ] . apply ( remove_number ) df . head ( 10 ) def clean_text ( headline ): le = WordNetLemmatizer () word_tokens = word_tokenize ( headline ) tokens = [ le . lemmatize ( w ) for w in word_tokens if w not in stop_words and len ( w ) > 3 ] cleaned_text = \" \" . join ( tokens ) return cleaned_text","title":"Load DataSet"},{"location":"SNDB/","text":"Solusi Numeri Persamaan Differensial Biasa \u00b6 Persamaan Differensial merupakan sebuah persamaan yang terdiri dari beberapa turunan biasa dari fungsi yang tidak diketahui dari variabel bebas tunggal dan variabel tersebut hanya disimbolkan degna x. Berikut ini beberapa contoh differensial biasa. 1.\\ \\dfrac{dy}{dx} = x +y\\\\ 2.\\ y^{'} = x^{2}+y^{2}\\\\ 3.\\ \\dfrac{2dy}{dx} +x^{2}y-y = 0\\\\ 4.\\ y^{''} + y^{'}cos\\ x -3y = sin\\ 2x\\\\ 5.\\ 2y^{'''}-23y^{'} = 1 -y^{''} Variabel bebas dari contoh tersebut adalah x dan variabel terikatnya adalah y yang merupakan fungsi dari x atau juga bisa ditulis y = f(x). Persamaan Differensial Biasa dikelompok kan berdasarkan oredenya yaitu: Persamaan Differensial orde 1 dimana turunan tertingginya adalah turunan pertama, pada contoh diatas berada pada nomor 1,2 dan 3/ Persamaan Differensial orde 2 dimana turunan tertingginya adalah turunan kedua, pada contoh diatas berada pada nomor 4. Persamaan Differensian Biasa orde 3 dimana turunan tertingginya adalah turunan ketiga, pada contoh ditas berada pada nomor 5. Bentuk baku persamaan differensial biasa dapat ditulis seperti berikut: y^{'} = f(x,y)\\ \\ \\ \\ \\ \\ atau\\ \\ \\ \\ \\ \\ \\dfrac{dy}{dx} = f(x,y) dengan niilai awal y(x0) = y Persamaan differensial biasa orede satu tidaka mengikuti bentuk umum tersebut jadi harus ditulis ulang agar dapat diselesaikan. Penyelesaian persamaan differensial biasa secara numerik berarti menghitung nilai fungsi di x_{i+1} = h , dengan h merupakan ukuran langkah setiap lelaran. pada metode analitik nilai awal digunakan untuk merperoleh solusi yang unik , sedangkan pada metode numerik nilai awal berfungsi untuk memulai lelaran. Dibawah ini akan dijelaskan beberapa solusi numerik untuk menyelesaikan persamaan differensial biasa. A. Metode Eular \u00b6 Metode eular adalah metode untuk menyelesaikan persamaan differensial biasa yang dihasilkan daru turunan deret Tylor. Metode eular juga disebut sebagai metode orde pertama karena hanya mengambil sampai suku pertama saja dari deret Tylor. Metode eular juga dapat di turunkan dengan menggunakan metode aturan segi empat untuk menginsterasikan (x,y) pada persamaan differensial. bentuk metode eular sebagai berikut: y(x_{i+1}) - y(x_{i}) = hf(x_{i},y(x_{i}))\\\\ atau\\\\ y(x_{i+1}) = y(x_{i}) + hf(x_{i},y(x_{i})) Contoh selesaikan persamaan differensial berikut: Diketahui persamaan differensial biasa sebagai berikut \\dfrac{dy}{dt} = x + y \\ dan\\ y(0)=1 gunakan metode eular untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 dan diketahui solusi persamaan differensial biasa sejatinya = 1,1103 2. Algoritma Metode Eular \u00b6 Deklarasikan fungsi persamaan differensial biasa yang akan di selesaikan. Masukkan inputan yang dibutuhkan seperti x(0), y(0), xb dan h Hitung perulangan yang diperlukan dengan menggunakan rumus n = (x_{b} - x_{0})/h Inisialisasi nilai x dan y awal sama dengan 0 dan y(0). Tentukan nilai analitiknya untuk menghitung nilai eror lakukan perulangan sebanyak n kali. Setiap kali melakukan perulangan maka nilai x dan y akan diupdate dengan menggunakn persamaan metode Eular, dan hitung nilai erornya kemudian tampilkan hasilnya 3. Source Code metode Eular \u00b6 berikut ini merupakan code hasil dari implementasi algoritma di atas: def f ( x , y ): return x + y print ( \"Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Euler\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) n = ( xb - x0 ) / h iterasi = int ( n ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================\" ) print ( \">>>>>>>>>>>>>>>>>>- METODE EULER -<<<<<<<<<<<<<<<<\" ) print ( \"==================================================\" ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) for i in range ( iterasi ): y = y + h * f ( x , y ) x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) print ( \"==================================================\" ) dan ketika code tersbut dijalankan maka outputnya sebagai berikut Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Euler Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================== >>>>>>>>>>>>>>>>>>- METODE EULER -<<<<<<<<<<<<<<<< ================================================== | i | x ( i ) | y ( i ) | e | 0 | 0.000000 | 1.000000 | 0.110300 | 1 | 0.020000 | 1.020000 | 0.090300 | 2 | 0.040000 | 1.040800 | 0.069500 | 3 | 0.060000 | 1.062416 | 0.047884 | 4 | 0.080000 | 1.084864 | 0.025436 | 5 | 0.100000 | 1.108162 | 0.002138 ================================================== B. Metode Heun \u00b6 Metode Heun adalah metode perbaikan dari metode eular yang memiliki nilai eror yang tinggi. Pada metode ini solusi dari metode Eular dijadikan sebagai solusi perkiraan awal (predictor), lalu solusi perkiraan awal tersebut diperbaiki dengan metode Heun (corecor). Sehingga persamaannya dapat ditulis sabagai berikut: Predictor= y^{0}_{i+1} = y_{i} + hf(x_{i},y_{i})\\\\ Corrector = y_{i+1} = y_{i}+\\dfrac{h}{2}[f(x_{i},y{i})+f(x_i+1),y^{0}_{i+1}] Contoh Soal: Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Heun untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103 1. Algoritma Metode Heun \u00b6 Deklarasikan fungsi persamaan differensial biasa yang akan diselesaikan. Masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang diperlukan dengan menggunakan rumus n = (x_{b} - x_{0})/h , Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} , Tentukan nilai analitiknya untuk menghitung nilai eror. Lakukan perulangan sebanyak nilai dari n. Setiap melakukan perulangan maka nilai y predictor dan y corrector serta x akan diupdate dengan menggunakan persmaan metode Heeun, lalu hitung nilai erornya dan tampilkan hasilnya. 2. Source Code Metode Heun \u00b6 berikut ini merupakan code hasil dari implementasi algoritma di atas. def f ( x , y ): return x + y print ( \"Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Heun\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================\" ) print ( \">>>>>>>>>>>>>>>>>>- METODE HEUN -<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================\" ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) for i in range ( n ): ypre = y + h * f ( x , y ) y = y + h / 2 * ( f ( x , y ) + f ( x + h , ypre )) x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) print ( \"==================================================\" ) dan ketika code diatas di jalankan maka hasilnya akan seperti berikut. Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Heun Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================== >>>>>>>>>>>>>>>>>>- METODE HEUN -<<<<<<<<<<<<<<<<< ================================================== | i | x ( i ) | y ( i ) | e | 0 | 0.000000 | 1.000000 | 0.110300 | 1 | 0.020000 | 1.020400 | 0.089900 | 2 | 0.040000 | 1.041616 | 0.068684 | 3 | 0.060000 | 1.063665 | 0.046635 | 4 | 0.080000 | 1.086563 | 0.023737 | 5 | 0.100000 | 1.110327 | 0.000027 ================================================== 3. Metode Runge-Kutta \u00b6 Pada metode Runge-Kutta persamaan differensial dapat diselesakan dengan ketelitian yang lebih tinggi, dan menghindarin mencari turunan yang lebih tinggi dengan cara mengevaluasi fungsi f(x,y) pada titik terpilih dalam setiap langkah. Metode ini paling banyak digunakan dalam praktek. bentuk umum metode runge-kutta orde-n adalah sebagai berikut: y_{i+1} = y_{i}+a_{1}k_{1}+a_{2}k_{2}+\\ldots+a_{n}k_{n} dengan a_{1},a_{2},...,a_{n} adalah tetapan dan k_{1} = hf(x_{i},y_{i})\\\\ k_{2} = hf(x_{i}+p_{1}h,y_{i}+q_{11}k_{1})\\\\ k_{3} = hf(x_{i}+p_{2}h,y_{i}+q_{21}k_{1}+q_{22}k_{2}\\\\ \\cdots\\\\ k_{n} = hf(x_{i}+p_{n-1}h,y_{i}+q_{n-1,1}k_{1}+q_{n-1,2}k_{2}+\\cdots+q_{n-1,n-1} k_{n-1} Dimana nilai a_{i}, p_{i}, q_{ij} dipilih sedemikian rupa sehingga meminimumkan galat perlangkah. Berikut ini jenis jenis metode Runge-Kutta berdasarkan orde nya. 1. Metode Runge-Kutta Orde 1 \u00b6 Metode ini berbentuk k_{1} = hf(x_{i},y_{i})\\\\ y_{i+1} = y_{i}+k_{1}\\\\ atau\\\\ y_{i+1} = y_{i} +hf(x_i,y_{i}) Salah satu bentuk contoh metode Runge-kutta orde 1 adalah memiliki bentuk persamaan seperti metode Euler. contoh soal: Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Runge-Kutta orde 1 untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103 a. Algoritma Runge-Kutta Orde 1 \u00b6 Deklarasikan fungsi persamaan differensial nya Masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang diperlukan dengan menggunakan rumus n = (x_{b} - x_{0})/h . Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} , Tentukan nilai analitiknya untuk menghitung nilai eror. lakukan perulangan sebanyak n. nilai k_{1} , nilai y dan nilai x serta nilai e akan diupdate setiap kali melakukan perulangan, lalu cetak nilai nilai tersebut setiap melakukan perulangan. b. Source Code Metode Runge-Kutta Orde 1 \u00b6 berikut ini merupakan code hasil dari implementasi algoritma di atas. def f ( x , y ): return x + y print ( \"Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde1\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA1 -<<<<<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================================\" ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e \\t\\t |k1' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e , \" \\t |0\" ) for i in range ( n ): k1 = h * f ( x , y ) y = y + k1 x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \\t |\" % e , \" %f \" % k1 ) print ( \"==================================================================\" ) dan hasil dari menjalan kan code diatas sebagai berikut. Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge - Kutta Orde1 Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================================== >>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE - KUTTA1 -<<<<<<<<<<<<<<<<<<<<< ================================================================== | i | x ( i ) | y ( i ) | e | k1 | 0 | 0.000000 | 1.000000 | 0.110300 | 0 | 1 | 0.020000 | 1.020000 | 0.090300 | 0.020000 | 2 | 0.040000 | 1.040800 | 0.069500 | 0.020800 | 3 | 0.060000 | 1.062416 | 0.047884 | 0.021616 | 4 | 0.080000 | 1.084864 | 0.025436 | 0.022448 | 5 | 0.100000 | 1.108162 | 0.002138 | 0.023297 ================================================================== 2. Metode Runge-Kutta Orde 2 \u00b6 Metode Orde 2 berbentuk k_{1} = hf(x_{i},y_{i})\\\\ k_{2} = hf(x_{i}+h,y_{i}+k_{1})\\\\ y_{i+1}= y_{i}+\\dfrac{1}{2}h(k1+k2) Salah satu bentuk contoh metode Rengu-Kutta orde 2 dapat dilihat dari bentuk persamaanya yang hampir mirip seperti metode Heun. Contoh Soal Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Runge-Kutta orde 2 untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103 a. Algoritma Metode Runge-Kutta Orde 2 \u00b6 Deklarasikan persamaan differensial biasanya Masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang dibutuhkan dengan menggunakan rumus n = (x_{b} - x_{0})/h . Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} . Tentukan nilai anlitiknya untuk digunakan menghitung eror. Lakukan perulangan sebanyak n. nilai k_{1} dan k_{2} , nilai y dan nilai x serta nilai e akan di update dan di cetak setiap kali melakukan perulangan. b. Source Code Metode Runge-Kutta Orde 2 \u00b6 Berikut ini merukapakan code hasil dari implementasi algoritma di atas. def f ( x , y ): return x + y print ( \"Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde2\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA2 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================================================\" ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e \\t\\t |k1 \\t\\t |k2' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e , \" \\t |0 \\t\\t |0\" ) for i in range ( n ): k1 = h * f ( x , y ) k2 = h * f ( x + h , y + k1 ) y = y + ( k1 + k2 ) / 2 x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \\t |\" % e , \" %f \\t |\" % k1 , \" %f \" % k2 ) print ( \"==================================================================================\" ) dan berikut ini merupakan hasil ketika code diatas dijalan kan. Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge - Kutta Orde2 Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================================================== >>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE - KUTTA2 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ================================================================================== | i | x ( i ) | y ( i ) | e | k1 | k2 | 0 | 0.000000 | 1.000000 | 0.110300 | 0 | 0 | 1 | 0.020000 | 1.020400 | 0.089900 | 0.020000 | 0.020800 | 2 | 0.040000 | 1.041616 | 0.068684 | 0.020808 | 0.021624 | 3 | 0.060000 | 1.063665 | 0.046635 | 0.021632 | 0.022465 | 4 | 0.080000 | 1.086563 | 0.023737 | 0.022473 | 0.023323 | 5 | 0.100000 | 1.110327 | 0.000027 | 0.023331 | 0.024198 ================================================================================== 3. Metode Runge-Kutta Orde 3 \u00b6 Metode runge-kutta orde 3 dikenal karena tingkat ketelitiannya yang lebih tinggi dibandingkan dengan kedua metode runge-kutta sebelumnya. Metode runge-kutta orde 3 memiliki bentuk sebagai berikut: k_{1} = hf(x_{i},y_{i})\\\\ k_{2} = hf(x_{i}+\\dfrac{h}{2},y_{i}+\\dfrac{k_{1}}{2})\\\\ k_{3} = hf(x_{i}+h,y_{i}-k{1}+2k_{2})\\\\ y_{i+1} = y_{i}+\\dfrac{(k_{1}+k_{2}+k_{3})}{6} Contoh: Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Runge-Kutta orde 3 untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103 a. Algoritma Metode Runge-Kutta Orde 3 \u00b6 Deklarasikan fungsi persamaan differensial yang akan diselesaikan. masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang dibutuhkan dengan menggunakan rumus n = (x_{b} - x_{0})/h . Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} . Tentukan nilai analitiknya untuk menghitung eror. Lakukan perulangan sebanyak n. nilai k_{1} hinga k_{3} , nilai y dan nilai x serta nilai e akan di update dan ditampilkan setiap kali melakukan perulangan. b. Source Code Metode Runge-Kutta Orde 3 \u00b6 Berikut ini merupakan Source code hasil dari implementasi algoritma di atas def f ( x , y ): return x + y print ( \"Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde3\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA ORDE 3 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================================================================\" ) print ( '|i \\t |x(i) \\t\\t |y(i) \\t\\t |e \\t\\t |k1 \\t\\t |k2 \\t\\t |k3' ) print ( \"| %d \" % x0 , ' \\t | %f ' % x , ' \\t | %f |' % y , ' \\t | %f ' % e , ' \\t |0' , ' \\t\\t |0' , ' \\t\\t |0' ) for i in range ( n ): k1 = h * f ( x , y ) k2 = h * f ( x + h / 2 , y + k1 / 2 ) k3 = h * f ( x + h , y - k1 + 2 * k2 ) y = y + ( k1 + 4 * k2 + k3 ) / 6 x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \\t |\" % e , \" %f \\t |\" % k1 , \" %f \\t |\" % k2 , \" %f \" % k3 ) print ( \"==================================================================================================\" ) dan hasil ketika code diatas di jalankan maka akan seperti berikut: Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Runge - Kutta Orde3 Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================================================================== >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE - KUTTA ORDE 3 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ================================================================================================== | i | x ( i ) | y ( i ) | e | k1 | k2 | k3 | 0 | 0.000000 | 1.000000 | | 0.110300 | 0 | 0 | 0 | 1 | 0.020000 | 1.020403 | 0.089897 | 0.020000 | 0.020400 | 0.020816 | 2 | 0.040000 | 1.041622 | 0.068678 | 0.020808 | 0.021216 | 0.021641 | 3 | 0.060000 | 1.063673 | 0.046627 | 0.021632 | 0.022049 | 0.022482 | 4 | 0.080000 | 1.086574 | 0.023726 | 0.022473 | 0.022898 | 0.023340 | 5 | 0.100000 | 1.110342 | 0.000042 | 0.023331 | 0.023765 | 0.024215 ================================================================================================== 4. Metode Runge-Kutta Orde 4 \u00b6 Metode ini merupakan metode penyelesaian persamaan differensial biasa dengan tingkat ketelitian yang tinggi. Bentuk umum nya sebagai berikut k_{1} = hf(x_{i},y_{i})\\\\ k_{2} = hf(x_{i}+\\dfrac{h}{2},y_{i}+\\dfrac{k1}{2})\\\\ k_{3} = hf(x_{i}+\\dfrac{h}{2},y_{i}+\\dfrac {k_{2}}{2})\\\\ k_{4} = hf(x_{i}+h,y_{i}+k_{3})\\\\ y_{i+1} = y_{i}+\\dfrac{k_{1}+2k_{2}+2k_{3}+k_{4}}{6} contoh: Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Runge-Kutta orde 4 untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103 a. Algortma Metode Runge-Kutta Orde 4 \u00b6 Deklarasikan fungsi persamaan differensial biasa yang akan diselesaikan. masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang dibutuhkan dengan menggunakan rumus n = (x_{b} - x_{0})/h . Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} . Tentukan nilai analitiknya untuk menghitung nilai eror. nilai k_{1} hinga k_{4} , nilai y dan nilai x serta nilai e akan diupdate dan ditamplikan setiap kali melakukan perulangan. b. Source Code Metode Runge-Kutta Orde 4 \u00b6 berkut ini adalah def f ( x , y ): return x + y print ( \"Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde4\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================================================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA ORDE 4 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================================================================================\" ) print ( '|i \\t |x(i) \\t\\t |y(i) \\t\\t |e \\t\\t |k1 \\t\\t |k2 \\t\\t |k3 \\t\\t |k4' ) print ( \"| %d \" % x0 , ' \\t | %f ' % x , ' \\t | %f |' % y , ' \\t | %f ' % e , ' \\t |0' , ' \\t\\t |0' , ' \\t\\t |0' , ' \\t\\t |0' ) for i in range ( n ): k1 = h * f ( x , y ) k2 = h * f ( x + h / 2 , y + k1 / 2 ) k3 = h * f ( x + h / 2 , y + k2 / 2 ) k4 = h * f ( x + h , y + k3 ) y = y + ( k1 + 2 * k2 + 2 * k3 + k4 ) / 6 x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \\t |\" % e , \" %f \\t |\" % k1 , \" %f \\t |\" % k2 , \" %f \\t |\" % k3 , \" %f \" % k4 ) print ( \"==================================================================================================================\" ) dan output dari hasil running code diatas sebagai berikut: Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde4 Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================================================================================== >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA ORDE 3 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ================================================================================================================== |i |x(i) |y(i) |e |k1 |k2 |k3 |k4 |0 |0.000000 |1.000000| |0.110300 |0 |0 |0 |0 |1 | 0.020000 | 1.020403 | 0.089897 | 0.020000 | 0.020400 | 0.020404 | 0.020808 |2 | 0.040000 | 1.041622 | 0.068678 | 0.020808 | 0.021216 | 0.021220 | 0.021632 |3 | 0.060000 | 1.063673 | 0.046627 | 0.021632 | 0.022049 | 0.022053 | 0.022473 |4 | 0.080000 | 1.086574 | 0.023726 | 0.022473 | 0.022898 | 0.022902 | 0.023332 |5 | 0.100000 | 1.110342 | 0.000042 | 0.023331 | 0.023765 | 0.023769 | 0.024207 ================================================================================================================== Referensi \u00b6 https://app.schoology.com/course/4711478201/materials/gp/4905811750 \u21a9 http://iffatul.staff.gunadarma.ac.id/Downloads/files/46564/BAb-+08+Solusi+Persamaan+Diferensial+Bi \u21a9","title":"Solusi Numeri Diferensial Biasa"},{"location":"SNDB/#solusi_numeri_persamaan_differensial_biasa","text":"Persamaan Differensial merupakan sebuah persamaan yang terdiri dari beberapa turunan biasa dari fungsi yang tidak diketahui dari variabel bebas tunggal dan variabel tersebut hanya disimbolkan degna x. Berikut ini beberapa contoh differensial biasa. 1.\\ \\dfrac{dy}{dx} = x +y\\\\ 2.\\ y^{'} = x^{2}+y^{2}\\\\ 3.\\ \\dfrac{2dy}{dx} +x^{2}y-y = 0\\\\ 4.\\ y^{''} + y^{'}cos\\ x -3y = sin\\ 2x\\\\ 5.\\ 2y^{'''}-23y^{'} = 1 -y^{''} Variabel bebas dari contoh tersebut adalah x dan variabel terikatnya adalah y yang merupakan fungsi dari x atau juga bisa ditulis y = f(x). Persamaan Differensial Biasa dikelompok kan berdasarkan oredenya yaitu: Persamaan Differensial orde 1 dimana turunan tertingginya adalah turunan pertama, pada contoh diatas berada pada nomor 1,2 dan 3/ Persamaan Differensial orde 2 dimana turunan tertingginya adalah turunan kedua, pada contoh diatas berada pada nomor 4. Persamaan Differensian Biasa orde 3 dimana turunan tertingginya adalah turunan ketiga, pada contoh ditas berada pada nomor 5. Bentuk baku persamaan differensial biasa dapat ditulis seperti berikut: y^{'} = f(x,y)\\ \\ \\ \\ \\ \\ atau\\ \\ \\ \\ \\ \\ \\dfrac{dy}{dx} = f(x,y) dengan niilai awal y(x0) = y Persamaan differensial biasa orede satu tidaka mengikuti bentuk umum tersebut jadi harus ditulis ulang agar dapat diselesaikan. Penyelesaian persamaan differensial biasa secara numerik berarti menghitung nilai fungsi di x_{i+1} = h , dengan h merupakan ukuran langkah setiap lelaran. pada metode analitik nilai awal digunakan untuk merperoleh solusi yang unik , sedangkan pada metode numerik nilai awal berfungsi untuk memulai lelaran. Dibawah ini akan dijelaskan beberapa solusi numerik untuk menyelesaikan persamaan differensial biasa.","title":"Solusi Numeri Persamaan Differensial Biasa"},{"location":"SNDB/#a_metode_eular","text":"Metode eular adalah metode untuk menyelesaikan persamaan differensial biasa yang dihasilkan daru turunan deret Tylor. Metode eular juga disebut sebagai metode orde pertama karena hanya mengambil sampai suku pertama saja dari deret Tylor. Metode eular juga dapat di turunkan dengan menggunakan metode aturan segi empat untuk menginsterasikan (x,y) pada persamaan differensial. bentuk metode eular sebagai berikut: y(x_{i+1}) - y(x_{i}) = hf(x_{i},y(x_{i}))\\\\ atau\\\\ y(x_{i+1}) = y(x_{i}) + hf(x_{i},y(x_{i})) Contoh selesaikan persamaan differensial berikut: Diketahui persamaan differensial biasa sebagai berikut \\dfrac{dy}{dt} = x + y \\ dan\\ y(0)=1 gunakan metode eular untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 dan diketahui solusi persamaan differensial biasa sejatinya = 1,1103","title":"A. Metode Eular"},{"location":"SNDB/#2_algoritma_metode_eular","text":"Deklarasikan fungsi persamaan differensial biasa yang akan di selesaikan. Masukkan inputan yang dibutuhkan seperti x(0), y(0), xb dan h Hitung perulangan yang diperlukan dengan menggunakan rumus n = (x_{b} - x_{0})/h Inisialisasi nilai x dan y awal sama dengan 0 dan y(0). Tentukan nilai analitiknya untuk menghitung nilai eror lakukan perulangan sebanyak n kali. Setiap kali melakukan perulangan maka nilai x dan y akan diupdate dengan menggunakn persamaan metode Eular, dan hitung nilai erornya kemudian tampilkan hasilnya","title":"2. Algoritma Metode Eular"},{"location":"SNDB/#3_source_code_metode_eular","text":"berikut ini merupakan code hasil dari implementasi algoritma di atas: def f ( x , y ): return x + y print ( \"Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Euler\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) n = ( xb - x0 ) / h iterasi = int ( n ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================\" ) print ( \">>>>>>>>>>>>>>>>>>- METODE EULER -<<<<<<<<<<<<<<<<\" ) print ( \"==================================================\" ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) for i in range ( iterasi ): y = y + h * f ( x , y ) x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) print ( \"==================================================\" ) dan ketika code tersbut dijalankan maka outputnya sebagai berikut Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Euler Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================== >>>>>>>>>>>>>>>>>>- METODE EULER -<<<<<<<<<<<<<<<< ================================================== | i | x ( i ) | y ( i ) | e | 0 | 0.000000 | 1.000000 | 0.110300 | 1 | 0.020000 | 1.020000 | 0.090300 | 2 | 0.040000 | 1.040800 | 0.069500 | 3 | 0.060000 | 1.062416 | 0.047884 | 4 | 0.080000 | 1.084864 | 0.025436 | 5 | 0.100000 | 1.108162 | 0.002138 ==================================================","title":"3. Source Code metode Eular"},{"location":"SNDB/#b_metode_heun","text":"Metode Heun adalah metode perbaikan dari metode eular yang memiliki nilai eror yang tinggi. Pada metode ini solusi dari metode Eular dijadikan sebagai solusi perkiraan awal (predictor), lalu solusi perkiraan awal tersebut diperbaiki dengan metode Heun (corecor). Sehingga persamaannya dapat ditulis sabagai berikut: Predictor= y^{0}_{i+1} = y_{i} + hf(x_{i},y_{i})\\\\ Corrector = y_{i+1} = y_{i}+\\dfrac{h}{2}[f(x_{i},y{i})+f(x_i+1),y^{0}_{i+1}] Contoh Soal: Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Heun untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103","title":"B. Metode Heun"},{"location":"SNDB/#1_algoritma_metode_heun","text":"Deklarasikan fungsi persamaan differensial biasa yang akan diselesaikan. Masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang diperlukan dengan menggunakan rumus n = (x_{b} - x_{0})/h , Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} , Tentukan nilai analitiknya untuk menghitung nilai eror. Lakukan perulangan sebanyak nilai dari n. Setiap melakukan perulangan maka nilai y predictor dan y corrector serta x akan diupdate dengan menggunakan persmaan metode Heeun, lalu hitung nilai erornya dan tampilkan hasilnya.","title":"1. Algoritma Metode Heun"},{"location":"SNDB/#2_source_code_metode_heun","text":"berikut ini merupakan code hasil dari implementasi algoritma di atas. def f ( x , y ): return x + y print ( \"Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Heun\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================\" ) print ( \">>>>>>>>>>>>>>>>>>- METODE HEUN -<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================\" ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) for i in range ( n ): ypre = y + h * f ( x , y ) y = y + h / 2 * ( f ( x , y ) + f ( x + h , ypre )) x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) print ( \"==================================================\" ) dan ketika code diatas di jalankan maka hasilnya akan seperti berikut. Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Heun Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================== >>>>>>>>>>>>>>>>>>- METODE HEUN -<<<<<<<<<<<<<<<<< ================================================== | i | x ( i ) | y ( i ) | e | 0 | 0.000000 | 1.000000 | 0.110300 | 1 | 0.020000 | 1.020400 | 0.089900 | 2 | 0.040000 | 1.041616 | 0.068684 | 3 | 0.060000 | 1.063665 | 0.046635 | 4 | 0.080000 | 1.086563 | 0.023737 | 5 | 0.100000 | 1.110327 | 0.000027 ==================================================","title":"2. Source Code Metode Heun"},{"location":"SNDB/#3_metode_runge-kutta","text":"Pada metode Runge-Kutta persamaan differensial dapat diselesakan dengan ketelitian yang lebih tinggi, dan menghindarin mencari turunan yang lebih tinggi dengan cara mengevaluasi fungsi f(x,y) pada titik terpilih dalam setiap langkah. Metode ini paling banyak digunakan dalam praktek. bentuk umum metode runge-kutta orde-n adalah sebagai berikut: y_{i+1} = y_{i}+a_{1}k_{1}+a_{2}k_{2}+\\ldots+a_{n}k_{n} dengan a_{1},a_{2},...,a_{n} adalah tetapan dan k_{1} = hf(x_{i},y_{i})\\\\ k_{2} = hf(x_{i}+p_{1}h,y_{i}+q_{11}k_{1})\\\\ k_{3} = hf(x_{i}+p_{2}h,y_{i}+q_{21}k_{1}+q_{22}k_{2}\\\\ \\cdots\\\\ k_{n} = hf(x_{i}+p_{n-1}h,y_{i}+q_{n-1,1}k_{1}+q_{n-1,2}k_{2}+\\cdots+q_{n-1,n-1} k_{n-1} Dimana nilai a_{i}, p_{i}, q_{ij} dipilih sedemikian rupa sehingga meminimumkan galat perlangkah. Berikut ini jenis jenis metode Runge-Kutta berdasarkan orde nya.","title":"3. Metode Runge-Kutta"},{"location":"SNDB/#1_metode_runge-kutta_orde_1","text":"Metode ini berbentuk k_{1} = hf(x_{i},y_{i})\\\\ y_{i+1} = y_{i}+k_{1}\\\\ atau\\\\ y_{i+1} = y_{i} +hf(x_i,y_{i}) Salah satu bentuk contoh metode Runge-kutta orde 1 adalah memiliki bentuk persamaan seperti metode Euler. contoh soal: Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Runge-Kutta orde 1 untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103","title":"1. Metode Runge-Kutta Orde 1"},{"location":"SNDB/#a_algoritma_runge-kutta_orde_1","text":"Deklarasikan fungsi persamaan differensial nya Masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang diperlukan dengan menggunakan rumus n = (x_{b} - x_{0})/h . Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} , Tentukan nilai analitiknya untuk menghitung nilai eror. lakukan perulangan sebanyak n. nilai k_{1} , nilai y dan nilai x serta nilai e akan diupdate setiap kali melakukan perulangan, lalu cetak nilai nilai tersebut setiap melakukan perulangan.","title":"a. Algoritma Runge-Kutta Orde 1"},{"location":"SNDB/#b_source_code_metode_runge-kutta_orde_1","text":"berikut ini merupakan code hasil dari implementasi algoritma di atas. def f ( x , y ): return x + y print ( \"Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde1\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA1 -<<<<<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================================\" ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e \\t\\t |k1' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e , \" \\t |0\" ) for i in range ( n ): k1 = h * f ( x , y ) y = y + k1 x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \\t |\" % e , \" %f \" % k1 ) print ( \"==================================================================\" ) dan hasil dari menjalan kan code diatas sebagai berikut. Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge - Kutta Orde1 Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================================== >>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE - KUTTA1 -<<<<<<<<<<<<<<<<<<<<< ================================================================== | i | x ( i ) | y ( i ) | e | k1 | 0 | 0.000000 | 1.000000 | 0.110300 | 0 | 1 | 0.020000 | 1.020000 | 0.090300 | 0.020000 | 2 | 0.040000 | 1.040800 | 0.069500 | 0.020800 | 3 | 0.060000 | 1.062416 | 0.047884 | 0.021616 | 4 | 0.080000 | 1.084864 | 0.025436 | 0.022448 | 5 | 0.100000 | 1.108162 | 0.002138 | 0.023297 ==================================================================","title":"b.  Source Code Metode Runge-Kutta Orde 1"},{"location":"SNDB/#2_metode_runge-kutta_orde_2","text":"Metode Orde 2 berbentuk k_{1} = hf(x_{i},y_{i})\\\\ k_{2} = hf(x_{i}+h,y_{i}+k_{1})\\\\ y_{i+1}= y_{i}+\\dfrac{1}{2}h(k1+k2) Salah satu bentuk contoh metode Rengu-Kutta orde 2 dapat dilihat dari bentuk persamaanya yang hampir mirip seperti metode Heun. Contoh Soal Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Runge-Kutta orde 2 untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103","title":"2. Metode Runge-Kutta Orde 2"},{"location":"SNDB/#a_algoritma_metode_runge-kutta_orde_2","text":"Deklarasikan persamaan differensial biasanya Masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang dibutuhkan dengan menggunakan rumus n = (x_{b} - x_{0})/h . Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} . Tentukan nilai anlitiknya untuk digunakan menghitung eror. Lakukan perulangan sebanyak n. nilai k_{1} dan k_{2} , nilai y dan nilai x serta nilai e akan di update dan di cetak setiap kali melakukan perulangan.","title":"a. Algoritma Metode Runge-Kutta Orde 2"},{"location":"SNDB/#b_source_code_metode_runge-kutta_orde_2","text":"Berikut ini merukapakan code hasil dari implementasi algoritma di atas. def f ( x , y ): return x + y print ( \"Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde2\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA2 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================================================\" ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e \\t\\t |k1 \\t\\t |k2' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e , \" \\t |0 \\t\\t |0\" ) for i in range ( n ): k1 = h * f ( x , y ) k2 = h * f ( x + h , y + k1 ) y = y + ( k1 + k2 ) / 2 x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \\t |\" % e , \" %f \\t |\" % k1 , \" %f \" % k2 ) print ( \"==================================================================================\" ) dan berikut ini merupakan hasil ketika code diatas dijalan kan. Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge - Kutta Orde2 Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================================================== >>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE - KUTTA2 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ================================================================================== | i | x ( i ) | y ( i ) | e | k1 | k2 | 0 | 0.000000 | 1.000000 | 0.110300 | 0 | 0 | 1 | 0.020000 | 1.020400 | 0.089900 | 0.020000 | 0.020800 | 2 | 0.040000 | 1.041616 | 0.068684 | 0.020808 | 0.021624 | 3 | 0.060000 | 1.063665 | 0.046635 | 0.021632 | 0.022465 | 4 | 0.080000 | 1.086563 | 0.023737 | 0.022473 | 0.023323 | 5 | 0.100000 | 1.110327 | 0.000027 | 0.023331 | 0.024198 ==================================================================================","title":"b. Source Code Metode Runge-Kutta Orde 2"},{"location":"SNDB/#3_metode_runge-kutta_orde_3","text":"Metode runge-kutta orde 3 dikenal karena tingkat ketelitiannya yang lebih tinggi dibandingkan dengan kedua metode runge-kutta sebelumnya. Metode runge-kutta orde 3 memiliki bentuk sebagai berikut: k_{1} = hf(x_{i},y_{i})\\\\ k_{2} = hf(x_{i}+\\dfrac{h}{2},y_{i}+\\dfrac{k_{1}}{2})\\\\ k_{3} = hf(x_{i}+h,y_{i}-k{1}+2k_{2})\\\\ y_{i+1} = y_{i}+\\dfrac{(k_{1}+k_{2}+k_{3})}{6} Contoh: Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Runge-Kutta orde 3 untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103","title":"3. Metode Runge-Kutta Orde 3"},{"location":"SNDB/#a_algoritma_metode_runge-kutta_orde_3","text":"Deklarasikan fungsi persamaan differensial yang akan diselesaikan. masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang dibutuhkan dengan menggunakan rumus n = (x_{b} - x_{0})/h . Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} . Tentukan nilai analitiknya untuk menghitung eror. Lakukan perulangan sebanyak n. nilai k_{1} hinga k_{3} , nilai y dan nilai x serta nilai e akan di update dan ditampilkan setiap kali melakukan perulangan.","title":"a. Algoritma Metode Runge-Kutta Orde 3"},{"location":"SNDB/#b_source_code_metode_runge-kutta_orde_3","text":"Berikut ini merupakan Source code hasil dari implementasi algoritma di atas def f ( x , y ): return x + y print ( \"Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde3\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA ORDE 3 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================================================================\" ) print ( '|i \\t |x(i) \\t\\t |y(i) \\t\\t |e \\t\\t |k1 \\t\\t |k2 \\t\\t |k3' ) print ( \"| %d \" % x0 , ' \\t | %f ' % x , ' \\t | %f |' % y , ' \\t | %f ' % e , ' \\t |0' , ' \\t\\t |0' , ' \\t\\t |0' ) for i in range ( n ): k1 = h * f ( x , y ) k2 = h * f ( x + h / 2 , y + k1 / 2 ) k3 = h * f ( x + h , y - k1 + 2 * k2 ) y = y + ( k1 + 4 * k2 + k3 ) / 6 x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \\t |\" % e , \" %f \\t |\" % k1 , \" %f \\t |\" % k2 , \" %f \" % k3 ) print ( \"==================================================================================================\" ) dan hasil ketika code diatas di jalankan maka akan seperti berikut: Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Runge - Kutta Orde3 Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================================================================== >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE - KUTTA ORDE 3 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ================================================================================================== | i | x ( i ) | y ( i ) | e | k1 | k2 | k3 | 0 | 0.000000 | 1.000000 | | 0.110300 | 0 | 0 | 0 | 1 | 0.020000 | 1.020403 | 0.089897 | 0.020000 | 0.020400 | 0.020816 | 2 | 0.040000 | 1.041622 | 0.068678 | 0.020808 | 0.021216 | 0.021641 | 3 | 0.060000 | 1.063673 | 0.046627 | 0.021632 | 0.022049 | 0.022482 | 4 | 0.080000 | 1.086574 | 0.023726 | 0.022473 | 0.022898 | 0.023340 | 5 | 0.100000 | 1.110342 | 0.000042 | 0.023331 | 0.023765 | 0.024215 ==================================================================================================","title":"b. Source Code Metode Runge-Kutta Orde 3"},{"location":"SNDB/#4_metode_runge-kutta_orde_4","text":"Metode ini merupakan metode penyelesaian persamaan differensial biasa dengan tingkat ketelitian yang tinggi. Bentuk umum nya sebagai berikut k_{1} = hf(x_{i},y_{i})\\\\ k_{2} = hf(x_{i}+\\dfrac{h}{2},y_{i}+\\dfrac{k1}{2})\\\\ k_{3} = hf(x_{i}+\\dfrac{h}{2},y_{i}+\\dfrac {k_{2}}{2})\\\\ k_{4} = hf(x_{i}+h,y_{i}+k_{3})\\\\ y_{i+1} = y_{i}+\\dfrac{k_{1}+2k_{2}+2k_{3}+k_{4}}{6} contoh: Diketahui PDB \\dfrac{dy}{dt} = x + y dan y(0) = 1 gunakan metode Runge-Kutta orde 4 untuk menghitung y(0,10) dengan ukuran langkah h = 0.02 . Dan diketahui solusi PDB sejatinya = 1,1103","title":"4. Metode Runge-Kutta Orde 4"},{"location":"SNDB/#a_algortma_metode_runge-kutta_orde_4","text":"Deklarasikan fungsi persamaan differensial biasa yang akan diselesaikan. masukkan inputan seperti x_{0},y_{0},xb , dan h . Hitung dan buat perulangan yang dibutuhkan dengan menggunakan rumus n = (x_{b} - x_{0})/h . Inisialisasi nilai x dan y awal sama dengan x_{o} dan y_{0} . Tentukan nilai analitiknya untuk menghitung nilai eror. nilai k_{1} hinga k_{4} , nilai y dan nilai x serta nilai e akan diupdate dan ditamplikan setiap kali melakukan perulangan.","title":"a. Algortma Metode Runge-Kutta Orde 4"},{"location":"SNDB/#b_source_code_metode_runge-kutta_orde_4","text":"berkut ini adalah def f ( x , y ): return x + y print ( \"Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde4\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) iterasi = ( xb - x0 ) / h n = int ( iterasi ) x = x0 y = y0 true = 1.1103 e = abs ( true - y ) print ( \"==================================================================================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA ORDE 4 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\" ) print ( \"==================================================================================================================\" ) print ( '|i \\t |x(i) \\t\\t |y(i) \\t\\t |e \\t\\t |k1 \\t\\t |k2 \\t\\t |k3 \\t\\t |k4' ) print ( \"| %d \" % x0 , ' \\t | %f ' % x , ' \\t | %f |' % y , ' \\t | %f ' % e , ' \\t |0' , ' \\t\\t |0' , ' \\t\\t |0' , ' \\t\\t |0' ) for i in range ( n ): k1 = h * f ( x , y ) k2 = h * f ( x + h / 2 , y + k1 / 2 ) k3 = h * f ( x + h / 2 , y + k2 / 2 ) k4 = h * f ( x + h , y + k3 ) y = y + ( k1 + 2 * k2 + 2 * k3 + k4 ) / 6 x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \\t |\" % e , \" %f \\t |\" % k1 , \" %f \\t |\" % k2 , \" %f \\t |\" % k3 , \" %f \" % k4 ) print ( \"==================================================================================================================\" ) dan output dari hasil running code diatas sebagai berikut: Penyelesaian Sistem Persamaan Differensial Biasa Menggunakan Metode Runge-Kutta Orde4 Masukkan Nilai X0 : 0 Masukkan Nilai y0 : 1 Masukkan Nilai X yang dicari : 0.1 Masukkan Nilai h : 0.02 ================================================================================================================== >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>- METODE RUNGE-KUTTA ORDE 3 -<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ================================================================================================================== |i |x(i) |y(i) |e |k1 |k2 |k3 |k4 |0 |0.000000 |1.000000| |0.110300 |0 |0 |0 |0 |1 | 0.020000 | 1.020403 | 0.089897 | 0.020000 | 0.020400 | 0.020404 | 0.020808 |2 | 0.040000 | 1.041622 | 0.068678 | 0.020808 | 0.021216 | 0.021220 | 0.021632 |3 | 0.060000 | 1.063673 | 0.046627 | 0.021632 | 0.022049 | 0.022053 | 0.022473 |4 | 0.080000 | 1.086574 | 0.023726 | 0.022473 | 0.022898 | 0.022902 | 0.023332 |5 | 0.100000 | 1.110342 | 0.000042 | 0.023331 | 0.023765 | 0.023769 | 0.024207 ==================================================================================================================","title":"b. Source Code Metode Runge-Kutta Orde 4"},{"location":"SNDB/#referensi","text":"https://app.schoology.com/course/4711478201/materials/gp/4905811750 \u21a9 http://iffatul.staff.gunadarma.ac.id/Downloads/files/46564/BAb-+08+Solusi+Persamaan+Diferensial+Bi \u21a9","title":"Referensi"},{"location":"SNPL/","text":"Solusi Numerik Sistem Persamaan Linier \u00b6 Sistem persaman linier merupakan kelompok persamaan yang terdiri dari beberapa variabel. \u200b Bentuk umum nya persamaan linier sebagai berikut: \u200b 1. persamaan linier 2 variabel \\begin{cases}ax+by = c\\\\ Px+qx = r \\end{cases} atau \\begin{cases}a_{1}x+b_{1}y = c_{1}\\\\ a_{2}x+b_{2}y = c_{2}\\end{cases} persamaan linier 3 variabel sebagai berikut \\begin{cases}ax+by+ cz= d\\\\ ex+fy+gz = h\\\\ ix+jy+kz = l \\end{cases} atau \\begin{cases}a_{1}x+b_{1}y + c_{1}z = d_{1}\\\\ a_{2}x+b_{2}y + c_{2}z = d_{2}\\\\a_{3}x+b_{3}y + c_{3}z = d_{3}\\end{cases} solusi untuk menyelesaikan ke 2 persamaan di atas akan di jelaskan di bawah ini A. Metode Eliminasi Gauss \u00b6 Eliminasi Gauss merupakan sebuah metode untuk menyelesaikan persamaan linier dengan cara mengubah sistem persamaan linier tersebut menjadi sebuah matrik yang berbentuk segitiga atas yaitu semua koefisien dibawah diagonal utamanya bernilai nol, lalu mensubtitusikan balik agar mendapatkan bentuk segitiga atas tersebut dar sistem persamaan linier yang diberikan. berikut ini algoritmanya contoh untuk menyelesaikan persamaan berikut: 6a - 2b + 2c + 4d = 16 12a - 8b + 6c + 10d = 26 3a - 13b + 9c + 3d = -19 -6a + 4b + c + -18d = -34 1. Algoritma Eliminasi Gauss \u00b6 Deklarasikan sistem persamaan linier dalam bentuk matrik Buat perulangan for dalam for (perulangan bersarang) untuk melakukan eliminasi maju dengan ketentuan sebagai berikut: perulangan pertama akan melakukan perulangan sebanyak panjang matrik yang dimulai dari 0 perulangan kedua berada didalam perulangan pertama dan akan menentukan nilai faktor dari nilai pengali pembuat 0 dan mengubah nilai matrik yang dikurangi dengan nilai dari fakto yang dikalikan dengan matrik di indeks atas diagonal. perulangan ketiga berada pada perulangan kedua yang digunakan unutk mengubah nilai matrik di indeks bawah diagonal menjadi nol, dengan cara dikurangi nilai dari faktor yang dikalikan dengan matrik di indeks atas diagonal. perulangan kedua berada didalam perulangan kedua yang berguna untuk menampilkan nilai matrik Buat perulangan for dalam for (perulangan bersarang) untuk melakukan subtitusi mundur dengan ketentuan sebagai berikut. perulangan pertama dimulai dari indeks terakhir sabanyak panjang matrik untuk mengambil hasil nilai dari x_{n} hingga x_{i} dan mengubah nilai matrik di indeks yang menyimpan nilai x_{i} dengan nilai yang diperoleh di perulangan kedua yang dibagi dengan koefisien x_{i} . perulangan kedua berada di dalam perulangan pertama yang akan mengurangi nilai hasil dengan nilai koefisien yang dikalikan dengan nilai x_{i} . perulaqngan ketiga berada didalam perulangan pertama untuk menampilkan nilai matrik yang sudah di ubah. menampilkan nilai dari x_{1} hingga x_{n} . 2. Code Metode Eliminasi Gauss \u00b6 hasil implementasi algoritma di atas sebagai berikut matrik = [ [[ 6 , - 2 , 2 , 4 ],[ \"X1\" ],[ 16 ]], [[ 12 , - 8 , 6 , 10 ],[ \"X2\" ],[ 26 ]], [[ 3 , - 13 , 9 , 3 ],[ \"X3\" ],[ - 19 ]], [[ - 6 , 4 , 1 , - 18 ],[ \"X4\" ],[ - 34 ]], ] print ( \"Penyelesaiaan Sistem Persamaan Linear Dari\" ) for u in matrik : print ( u ) print ( \"Menggunakan Metode Eliminasi Gauss\" ) print ( \"=======================================================\" ) print ( \">>>>>>>>>>>>>>- METODE ELIMINNASI GAUSS -<<<<<<<<<<<<<\" ) print ( \"=======================================================\" ) #untuk Eliminasi Maju for k in range ( 0 , len ( matrik ) - 1 ): for i in range ( k + 1 , len ( matrik )): faktor = matrik [ i ][ 0 ][ k ] / matrik [ k ][ 0 ][ k ] print ( \"faktor = \" , faktor ) for j in range ( k , len ( matrik )): matrik [ i ][ 0 ][ j ] = round ( matrik [ i ][ 0 ][ j ] - ( faktor * matrik [ k ][ 0 ][ j ]), 4 ) matrik [ i ][ 2 ][ 0 ] = round ( matrik [ i ][ 2 ][ 0 ] - ( faktor * matrik [ k ][ 2 ][ 0 ]), 2 ) for u in matrik : print ( u ) print ( \" \\n \" ) #Untuk Substitusi Mundur for i in range ( len ( matrik ) - 1 , - 1 , - 1 ): sum = matrik [ i ][ 2 ][ 0 ] for j in range ( i + 1 , len ( matrik )): sum = sum - round (( matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ]), 4 ) matrik [ i ][ 1 ][ 0 ] = round ( sum / matrik [ i ][ 0 ][ i ], 4 ) for u in matrik : print ( u ) print ( \" \\n \" ) print ( \"Nilai Variabel yang diperoleh\" ) for u in range ( len ( matrik [ 0 ][ 0 ])): print ( f \"x { u + 1 } = { round ( matrik [ u ][ 1 ][ 0 ], 4 ) } \" ) print ( \"=======================================================\" ) dan hasil ketika program tersebut di jalan kan sebagai berikut Penyelesaiaan Sistem Persamaan Linear Dari [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 12 , - 8 , 6 , 10 ], [ 'X2' ], [ 26 ]] [[ 3 , - 13 , 9 , 3 ], [ 'X3' ], [ - 19 ]] [[ - 6 , 4 , 1 , - 18 ], [ 'X4' ], [ - 34 ]] Menggunakan Metode Eliminasi Gauss ======================================================= >>>>>>>>>>>>>>- METODE ELIMINNASI GAUSS -<<<<<<<<<<<<< ======================================================= faktor = 2.0 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 3 , - 13 , 9 , 3 ], [ 'X3' ], [ - 19 ]] [[ - 6 , 4 , 1 , - 18 ], [ 'X4' ], [ - 34 ]] faktor = 0.5 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , - 12.0 , 8.0 , 1.0 ], [ 'X3' ], [ - 27.0 ]] [[ - 6 , 4 , 1 , - 18 ], [ 'X4' ], [ - 34 ]] faktor = - 1.0 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , - 12.0 , 8.0 , 1.0 ], [ 'X3' ], [ - 27.0 ]] [[ 0.0 , 2.0 , 3.0 , - 14.0 ], [ 'X4' ], [ - 18.0 ]] faktor = 3.0 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ 'X3' ], [ - 9.0 ]] [[ 0.0 , 2.0 , 3.0 , - 14.0 ], [ 'X4' ], [ - 18.0 ]] faktor = - 0.5 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ 'X3' ], [ - 9.0 ]] [[ 0.0 , 0.0 , 4.0 , - 13.0 ], [ 'X4' ], [ - 21.0 ]] faktor = 2.0 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ 'X3' ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 'X4' ], [ - 3.0 ]] [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ 'X3' ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 1.0 ], [ - 3.0 ]] [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ - 2.0 ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 1.0 ], [ - 3.0 ]] [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 1.0 ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ - 2.0 ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 1.0 ], [ - 3.0 ]] [[ 6 , - 2 , 2 , 4 ], [ 3.0 ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 1.0 ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ - 2.0 ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 1.0 ], [ - 3.0 ]] Nilai Variabel yang diperoleh x1 = 3.0 x2 = 1.0 x3 = - 2.0 x4 = 1.0 ======================================================= B. Metode Jacobi \u00b6 Metode jacobi adalah metode yang digunakan untuk menyelesaikan persamaan linier dengan cara melakukan iterasi. Secara umum dapat dituliskan sebagai beriku: x^{(k+1)}_{i} =\\left( b_{i}-\\sum^{i-1}_{j=1}a_{ij}x^{k}_{j}-\\sum^{n}_{j=i+1}a_{ij}x^{k}_{j} \\right)/a_{ii} contoh soal: Selesaikan persamaan linier 4 variabel berikut dengan menggunakan metode jacobi. 10a - b + 2c = 6 -a + 11b - c + 3d = 25 2a - b + 10c - d = -11 3b - c + 8d = 15 1. Algoritma Metode Jacobi \u00b6 Deklarasikan sistem persamaan dalan bentuk matrik Deklarasikan nilai X_{i} dari hasil analitik. Deklarasikan array kosong Buat perulangan untuk menampilkan sistem persamaan linier dalam benutk matrik Tentukan banyak nya iterasi (n) Buat perulangan untuk membuat nilai awal X_{i}=0 Buat perulangan for dalam for (perulangan bersarang) dengan ketentuan sebagai berikut: Perulangan pertama sebanyak n inputan yang akan menentukan berapa kali perulangan tersebut melakukan iterasi dan mengahapus nilai di dalam array kosong perulangan kedua berada di dalam perulangan pertama dan melakukan perulangan sebanyak panjang dari matrik untuk mengambil nilai hasil didalam matrik lalu menampung nilai yang dihasilkan dari perulangan ketiga kedalam array kosong. perulangan keempat berada di dalam perulangan pertama dan melakukan perulangan sebanyak panjang matrik unutk mengubah nilai X_{i} dengan nilai yang ditampung didalam array kosong lalu menghitung nilai eror yang dihasilkan kemudian menampilkan nilai X_{i} dan eror yang dihasilkan pada iterasi ke-k. 2. Code Metode Jacobi \u00b6 Berikut ini merupakan code hasil dari implementasi algoritma di atas: matrik = [ [[ 10 , - 1 , 2 , 0 ],[ \"X1\" ],[ 6 ]], [[ - 1 , 11 , - 1 , 3 ],[ \"X2\" ],[ 25 ]], [[ 2 , - 1 , 10 , - 1 ],[ \"X3\" ],[ - 11 ]], [[ 0 , 3 , - 1 , 8 ],[ \"X4\" ],[ 15 ]], ] true = [ 1 , 2 , - 1 , 1 ] K = [] print ( \"Penyelesaiaan Sistem Persamaan Linear Dari\" ) for i in matrik : print ( i ) print ( \"Menggunakan Metode Jacobi\" ) n = int ( input ( \"Masukkan banyak iterasi : \" )) print ( \"=======================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>- METODE JACOBI -<<<<<<<<<<<<<<<<<<\" ) print ( \"=======================================================\" ) for i in range ( len ( matrik [ 0 ][ 0 ])): matrik [ i ][ 1 ][ 0 ] = 0 for k in range ( n ): for i in range ( len ( matrik )): sum = matrik [ i ][ 2 ][ 0 ] for j in range ( len ( matrik )): if i == j : continue sum = sum - matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ] K . append ( sum / matrik [ i ][ 0 ][ i ]) print ( f \"iterasi { k + 1 } \" , ' \\t ' , \"|Xi\" , ' \\t\\t\\t ' , \"|errorXi\" ) for x in range ( len ( matrik )): matrik [ x ][ 1 ][ 0 ] = K [ x ] ea = abs (( true [ x ] - K [ x ]) / true [ x ]) * 100 print ( \"X\" + str ( x + 1 ), ' \\t\\t ' , \"| %.10f |\" % K [ x ], ' \\t ' , \" %.10f \" % ea ) K . clear () print ( \"=======================================================\" ) dan hasil ketika program diatas dijalankan sebagai berikut: Penyelesaiaan Sistem Persamaan Linear Dari [[ 10 , - 1 , 2 , 0 ], [ 'X1' ], [ 6 ]] [[ - 1 , 11 , - 1 , 3 ], [ 'X2' ], [ 25 ]] [[ 2 , - 1 , 10 , - 1 ], [ 'X3' ], [ - 11 ]] [[ 0 , 3 , - 1 , 8 ], [ 'X4' ], [ 15 ]] Menggunakan Metode Jacobi Masukkan banyak iterasi : 10 ======================================================= >>>>>>>>>>>>>>>>>>>>- METODE JACOBI -<<<<<<<<<<<<<<<<<< ======================================================= iterasi 1 | Xi | errorXi X1 | 0.6000000000 | 40.0000000000 X2 | 2.2727272727 | 13.6363636364 X3 |- 1.1000000000 | 10.0000000000 X4 | 1.8750000000 | 87.5000000000 iterasi 2 | Xi | errorXi X1 | 1.0472727273 | 4.7272727273 X2 | 1.7159090909 | 14.2045454545 X3 |- 0.8052272727 | 19.4772727273 X4 | 0.8852272727 | 11.4772727273 iterasi 3 | Xi | errorXi X1 | 0.9326363636 | 6.7363636364 X2 | 2.0533057851 | 2.6652892562 X3 |- 1.0493409091 | 4.9340909091 X4 | 1.1308806818 | 13.0880681818 iterasi 4 | Xi | errorXi X1 | 1.0151987603 | 1.5198760331 X2 | 1.9536957645 | 2.3152117769 X3 |- 0.9681086260 | 3.1891373967 X4 | 0.9738427169 | 2.6157283058 iterasi 5 | Xi | errorXi X1 | 0.9889913017 | 1.1008698347 X2 | 2.0114147258 | 0.5707362885 X3 |- 1.0102859039 | 1.0285903926 X4 | 1.0213505101 | 2.1350510072 iterasi 6 | Xi | errorXi X1 | 1.0031986534 | 0.3198653362 X2 | 1.9922412607 | 0.3879369659 X3 |- 0.9945217367 | 0.5478263254 X4 | 0.9944337398 | 0.5566260154 iterasi 7 | Xi | errorXi X1 | 0.9981284734 | 0.1871526582 X2 | 2.0023068816 | 0.1153440776 X3 |- 1.0019722306 | 0.1972230620 X4 | 1.0035943102 | 0.3594310151 iterasi 8 | Xi | errorXi X1 | 1.0006251343 | 0.0625134279 X2 | 1.9986703011 | 0.0664849439 X3 |- 0.9990355755 | 0.0964424487 X4 | 0.9988883906 | 0.1111609410 iterasi 9 | Xi | errorXi X1 | 0.9996741452 | 0.0325854785 X2 | 2.0004476715 | 0.0223835773 X3 |- 1.0003691577 | 0.0369157685 X4 | 1.0006191901 | 0.0619190140 iterasi 10 | Xi | errorXi X1 | 1.0001185987 | 0.0118598691 X2 | 1.9997679470 | 0.0116026495 X3 |- 0.9998281429 | 0.0171857126 X4 | 0.9997859785 | 0.0214021540 ======================================================= C. Metode Gauss Seidel \u00b6 \u200b Metode Gauss Seidel merupakan sebuah metode yang digunakan untuk menyelesaikan sebuah sistem persamaan liner yang memiliki metode hampir sama dengan metode Jacobi, hanya saja jika pada metode jacobi nilai x_{1} yang didapatkan dari persamaan pertama tidak digunakan untuk menghitung nilai x_{2} dengan persamaan kedua.Dan x_{2} tidak digunakan untuk menghitung nilai x_{3} begitu seterusnya. Jadi pada persamaan Gauss Seidel x_{1} digunakan untuk mencari x_{2} , lalu x_{2} digunakan untuk mencari x_{3} vegitupun seterusnya. Jadi kesimpulannya metode jacobi tidak menggunakan nilai terbaru sedangkan metode gauss seidel menggunkan nilai terbaru. \u200b Secara umum bentuk persamaan aguss seidel dapat dituliskan seperti berikut: x^{(k+1)}_{i} =\\left( b_{i}-\\sum^{i-1}_{j=1}a_{ij}x^{(k+1)}_{j}-\\sum^{n}_{j=i+1}a_{ij}x^{k}_{j} \\right)/a_{ii} Contoh selesaikan sistem persamaan linier berikut: 10a - b + 2c = 6 -a + 11b - c + 3d = 25 2a - b + 10c - d = -11 3b - c + 8d = 15 1. Algoritma Metode Gauss Seidel \u00b6 Deklarasikan sistem persamaan linier Deklarasikan nilai X_{i} dari hasil analitik Buat perulangan untuk menampilkan sistem persamaan linier dalam bentuk matrik tentukna banyak iterasi (n) Buat perulangan untuk membuat nilai awal X_{i}=0 Buat perulangan for dalam for (perulangan bersarang) dengan ketentuan: Perulangan pertama melakukan perulangan sebanyak n inputan untuk menentukan berapakali iterasi yang akan di jalankan perulangan kedua berada dalam perulangan pertama dan melakukan perulangan sebanyak panjang dari matrik untuk mengambil hasil nilai di dalam matrik dan mengubah nilai X_{i} menjadi nilai yang dihasilkan dari perulangan ketiga. Perulangan ketiga berada di dalam perulangan kedua dan melakukan perulangan sebanyyak panjang dari matrik untuk mengurangi nilai hasil dengan koefisien yang dikalikan dengan nilai X_{i} dengan mengambil nilai dari matrik. perulangan keempat berada didalam perulangan pertama dan melakukan perulangan sebanyak panjang matrik untuk menghitung nilai eror yang dihasilkan kemudian menampilkan nilai X_{i} dan eror yang dihasilkan pada iterasi ke-k 2. Code Metode Gauss Seidel \u00b6 berikut ini merupakan code python hasil dari implementasi algoritma di atas matrik = [ [[ 10 , - 1 , 2 , 0 ],[ \"X1\" ],[ 6 ]], [[ - 1 , 11 , - 1 , 3 ],[ \"X2\" ],[ 25 ]], [[ 2 , - 1 , 10 , - 1 ],[ \"X3\" ],[ - 11 ]], [[ 0 , 3 , - 1 , 8 ],[ \"X4\" ],[ 15 ]], ] true = [ 1 , 2 , - 1 , 1 ] print ( \"Penyelesaiaan Sistem Persamaan Linear Dari\" ) for i in matrik : print ( i ) print ( \"Menggunakan Metode Gauss Seidel\" ) n = int ( input ( \"Masukkan banyak iterasi : \" )) print ( \"=======================================================\" ) print ( \">>>>>>>>>>>>>>>>>- METODE GAUSS SEIDEL -<<<<<<<<<<<<<<<\" ) print ( \"=======================================================\" ) for i in range ( len ( matrik [ 0 ][ 0 ])): matrik [ i ][ 1 ][ 0 ] = 0 for k in range ( n ): for i in range ( len ( matrik )): Xi = matrik [ i ][ 1 ][ 0 ] sum = matrik [ i ][ 2 ][ 0 ] for j in range ( len ( matrik )): if j == i : continue sum = sum - matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ] matrik [ i ][ 1 ][ 0 ] = sum / matrik [ i ][ 0 ][ i ] print ( f \"iterasi { k + 1 } \" , ' \\t ' , \"|Xi\" , ' \\t\\t\\t ' , \"|errorXi\" ) for x in range ( len ( matrik )): ea = abs (( matrik [ x ][ 1 ][ 0 ] - true [ x ]) / true [ x ]) * 100 print ( \"X\" + str ( x + 1 ), ' \\t\\t ' , \"| %.10f |\" % matrik [ x ][ 1 ][ 0 ], ' \\t ' , \" %.10f \" % ea ) print ( \"=======================================================\" ) dan ketika program di atas dijalan kan maka outputnya akan seperti berikut: Penyelesaiaan Sistem Persamaan Linear Dari [[ 10 , - 1 , 2 , 0 ], [ 'X1' ], [ 6 ]] [[ - 1 , 11 , - 1 , 3 ], [ 'X2' ], [ 25 ]] [[ 2 , - 1 , 10 , - 1 ], [ 'X3' ], [ - 11 ]] [[ 0 , 3 , - 1 , 8 ], [ 'X4' ], [ 15 ]] Menggunakan Metode Gauss Seidel Masukkan banyak iterasi : 5 ======================================================= >>>>>>>>>>>>>>>>>- METODE GAUSS SEIDEL -<<<<<<<<<<<<<<< ======================================================= iterasi 1 | Xi | errorXi X1 | 0.6000000000 | 40.0000000000 X2 | 2.3272727273 | 16.3636363636 X3 |- 0.9872727273 | 1.2727272727 X4 | 0.8788636364 | 12.1136363636 iterasi 2 | Xi | errorXi X1 | 1.0301818182 | 3.0181818182 X2 | 2.0369380165 | 1.8469008264 X3 |- 1.0144561983 | 1.4456198347 X4 | 0.9843412190 | 1.5658780992 iterasi 3 | Xi | errorXi X1 | 1.0065850413 | 0.6585041322 X2 | 2.0035550169 | 0.1777508452 X3 |- 1.0025273847 | 0.2527384673 X4 | 0.9983509456 | 0.1649054423 iterasi 4 | Xi | errorXi X1 | 1.0008609786 | 0.0860978625 X2 | 2.0002982507 | 0.0149125328 X3 |- 1.0003072761 | 0.0307276102 X4 | 0.9998497465 | 0.0150253509 iterasi 5 | Xi | errorXi X1 | 1.0000912803 | 0.0091280286 X2 | 2.0000213422 | 0.0010671123 X3 |- 1.0000311472 | 0.0031147183 X4 | 0.9999881033 | 0.0011896740 ======================================================= Refrensi \u00b6 https://id.m.wikipedia.org/wiki/Sistem_persamaan_linear \u21a9 https://www.slideshare.net/KhannalPakinde/makalah-metode-numerik-sistem-persamaan-linear \u21a9","title":"Solusi Numerik Persamaan Liner"},{"location":"SNPL/#solusi_numerik_sistem_persamaan_linier","text":"Sistem persaman linier merupakan kelompok persamaan yang terdiri dari beberapa variabel. \u200b Bentuk umum nya persamaan linier sebagai berikut: \u200b 1. persamaan linier 2 variabel \\begin{cases}ax+by = c\\\\ Px+qx = r \\end{cases} atau \\begin{cases}a_{1}x+b_{1}y = c_{1}\\\\ a_{2}x+b_{2}y = c_{2}\\end{cases} persamaan linier 3 variabel sebagai berikut \\begin{cases}ax+by+ cz= d\\\\ ex+fy+gz = h\\\\ ix+jy+kz = l \\end{cases} atau \\begin{cases}a_{1}x+b_{1}y + c_{1}z = d_{1}\\\\ a_{2}x+b_{2}y + c_{2}z = d_{2}\\\\a_{3}x+b_{3}y + c_{3}z = d_{3}\\end{cases} solusi untuk menyelesaikan ke 2 persamaan di atas akan di jelaskan di bawah ini","title":"Solusi Numerik Sistem Persamaan Linier"},{"location":"SNPL/#a_metode_eliminasi_gauss","text":"Eliminasi Gauss merupakan sebuah metode untuk menyelesaikan persamaan linier dengan cara mengubah sistem persamaan linier tersebut menjadi sebuah matrik yang berbentuk segitiga atas yaitu semua koefisien dibawah diagonal utamanya bernilai nol, lalu mensubtitusikan balik agar mendapatkan bentuk segitiga atas tersebut dar sistem persamaan linier yang diberikan. berikut ini algoritmanya contoh untuk menyelesaikan persamaan berikut: 6a - 2b + 2c + 4d = 16 12a - 8b + 6c + 10d = 26 3a - 13b + 9c + 3d = -19 -6a + 4b + c + -18d = -34","title":"A. Metode Eliminasi Gauss"},{"location":"SNPL/#1_algoritma_eliminasi_gauss","text":"Deklarasikan sistem persamaan linier dalam bentuk matrik Buat perulangan for dalam for (perulangan bersarang) untuk melakukan eliminasi maju dengan ketentuan sebagai berikut: perulangan pertama akan melakukan perulangan sebanyak panjang matrik yang dimulai dari 0 perulangan kedua berada didalam perulangan pertama dan akan menentukan nilai faktor dari nilai pengali pembuat 0 dan mengubah nilai matrik yang dikurangi dengan nilai dari fakto yang dikalikan dengan matrik di indeks atas diagonal. perulangan ketiga berada pada perulangan kedua yang digunakan unutk mengubah nilai matrik di indeks bawah diagonal menjadi nol, dengan cara dikurangi nilai dari faktor yang dikalikan dengan matrik di indeks atas diagonal. perulangan kedua berada didalam perulangan kedua yang berguna untuk menampilkan nilai matrik Buat perulangan for dalam for (perulangan bersarang) untuk melakukan subtitusi mundur dengan ketentuan sebagai berikut. perulangan pertama dimulai dari indeks terakhir sabanyak panjang matrik untuk mengambil hasil nilai dari x_{n} hingga x_{i} dan mengubah nilai matrik di indeks yang menyimpan nilai x_{i} dengan nilai yang diperoleh di perulangan kedua yang dibagi dengan koefisien x_{i} . perulangan kedua berada di dalam perulangan pertama yang akan mengurangi nilai hasil dengan nilai koefisien yang dikalikan dengan nilai x_{i} . perulaqngan ketiga berada didalam perulangan pertama untuk menampilkan nilai matrik yang sudah di ubah. menampilkan nilai dari x_{1} hingga x_{n} .","title":"1. Algoritma Eliminasi Gauss"},{"location":"SNPL/#2_code_metode_eliminasi_gauss","text":"hasil implementasi algoritma di atas sebagai berikut matrik = [ [[ 6 , - 2 , 2 , 4 ],[ \"X1\" ],[ 16 ]], [[ 12 , - 8 , 6 , 10 ],[ \"X2\" ],[ 26 ]], [[ 3 , - 13 , 9 , 3 ],[ \"X3\" ],[ - 19 ]], [[ - 6 , 4 , 1 , - 18 ],[ \"X4\" ],[ - 34 ]], ] print ( \"Penyelesaiaan Sistem Persamaan Linear Dari\" ) for u in matrik : print ( u ) print ( \"Menggunakan Metode Eliminasi Gauss\" ) print ( \"=======================================================\" ) print ( \">>>>>>>>>>>>>>- METODE ELIMINNASI GAUSS -<<<<<<<<<<<<<\" ) print ( \"=======================================================\" ) #untuk Eliminasi Maju for k in range ( 0 , len ( matrik ) - 1 ): for i in range ( k + 1 , len ( matrik )): faktor = matrik [ i ][ 0 ][ k ] / matrik [ k ][ 0 ][ k ] print ( \"faktor = \" , faktor ) for j in range ( k , len ( matrik )): matrik [ i ][ 0 ][ j ] = round ( matrik [ i ][ 0 ][ j ] - ( faktor * matrik [ k ][ 0 ][ j ]), 4 ) matrik [ i ][ 2 ][ 0 ] = round ( matrik [ i ][ 2 ][ 0 ] - ( faktor * matrik [ k ][ 2 ][ 0 ]), 2 ) for u in matrik : print ( u ) print ( \" \\n \" ) #Untuk Substitusi Mundur for i in range ( len ( matrik ) - 1 , - 1 , - 1 ): sum = matrik [ i ][ 2 ][ 0 ] for j in range ( i + 1 , len ( matrik )): sum = sum - round (( matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ]), 4 ) matrik [ i ][ 1 ][ 0 ] = round ( sum / matrik [ i ][ 0 ][ i ], 4 ) for u in matrik : print ( u ) print ( \" \\n \" ) print ( \"Nilai Variabel yang diperoleh\" ) for u in range ( len ( matrik [ 0 ][ 0 ])): print ( f \"x { u + 1 } = { round ( matrik [ u ][ 1 ][ 0 ], 4 ) } \" ) print ( \"=======================================================\" ) dan hasil ketika program tersebut di jalan kan sebagai berikut Penyelesaiaan Sistem Persamaan Linear Dari [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 12 , - 8 , 6 , 10 ], [ 'X2' ], [ 26 ]] [[ 3 , - 13 , 9 , 3 ], [ 'X3' ], [ - 19 ]] [[ - 6 , 4 , 1 , - 18 ], [ 'X4' ], [ - 34 ]] Menggunakan Metode Eliminasi Gauss ======================================================= >>>>>>>>>>>>>>- METODE ELIMINNASI GAUSS -<<<<<<<<<<<<< ======================================================= faktor = 2.0 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 3 , - 13 , 9 , 3 ], [ 'X3' ], [ - 19 ]] [[ - 6 , 4 , 1 , - 18 ], [ 'X4' ], [ - 34 ]] faktor = 0.5 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , - 12.0 , 8.0 , 1.0 ], [ 'X3' ], [ - 27.0 ]] [[ - 6 , 4 , 1 , - 18 ], [ 'X4' ], [ - 34 ]] faktor = - 1.0 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , - 12.0 , 8.0 , 1.0 ], [ 'X3' ], [ - 27.0 ]] [[ 0.0 , 2.0 , 3.0 , - 14.0 ], [ 'X4' ], [ - 18.0 ]] faktor = 3.0 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ 'X3' ], [ - 9.0 ]] [[ 0.0 , 2.0 , 3.0 , - 14.0 ], [ 'X4' ], [ - 18.0 ]] faktor = - 0.5 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ 'X3' ], [ - 9.0 ]] [[ 0.0 , 0.0 , 4.0 , - 13.0 ], [ 'X4' ], [ - 21.0 ]] faktor = 2.0 [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ 'X3' ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 'X4' ], [ - 3.0 ]] [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ 'X3' ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 1.0 ], [ - 3.0 ]] [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 'X2' ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ - 2.0 ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 1.0 ], [ - 3.0 ]] [[ 6 , - 2 , 2 , 4 ], [ 'X1' ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 1.0 ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ - 2.0 ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 1.0 ], [ - 3.0 ]] [[ 6 , - 2 , 2 , 4 ], [ 3.0 ], [ 16 ]] [[ 0.0 , - 4.0 , 2.0 , 2.0 ], [ 1.0 ], [ - 6.0 ]] [[ 0.0 , 0.0 , 2.0 , - 5.0 ], [ - 2.0 ], [ - 9.0 ]] [[ 0.0 , 0.0 , 0.0 , - 3.0 ], [ 1.0 ], [ - 3.0 ]] Nilai Variabel yang diperoleh x1 = 3.0 x2 = 1.0 x3 = - 2.0 x4 = 1.0 =======================================================","title":"2. Code Metode Eliminasi Gauss"},{"location":"SNPL/#b_metode_jacobi","text":"Metode jacobi adalah metode yang digunakan untuk menyelesaikan persamaan linier dengan cara melakukan iterasi. Secara umum dapat dituliskan sebagai beriku: x^{(k+1)}_{i} =\\left( b_{i}-\\sum^{i-1}_{j=1}a_{ij}x^{k}_{j}-\\sum^{n}_{j=i+1}a_{ij}x^{k}_{j} \\right)/a_{ii} contoh soal: Selesaikan persamaan linier 4 variabel berikut dengan menggunakan metode jacobi. 10a - b + 2c = 6 -a + 11b - c + 3d = 25 2a - b + 10c - d = -11 3b - c + 8d = 15","title":"B. Metode Jacobi"},{"location":"SNPL/#1_algoritma_metode_jacobi","text":"Deklarasikan sistem persamaan dalan bentuk matrik Deklarasikan nilai X_{i} dari hasil analitik. Deklarasikan array kosong Buat perulangan untuk menampilkan sistem persamaan linier dalam benutk matrik Tentukan banyak nya iterasi (n) Buat perulangan untuk membuat nilai awal X_{i}=0 Buat perulangan for dalam for (perulangan bersarang) dengan ketentuan sebagai berikut: Perulangan pertama sebanyak n inputan yang akan menentukan berapa kali perulangan tersebut melakukan iterasi dan mengahapus nilai di dalam array kosong perulangan kedua berada di dalam perulangan pertama dan melakukan perulangan sebanyak panjang dari matrik untuk mengambil nilai hasil didalam matrik lalu menampung nilai yang dihasilkan dari perulangan ketiga kedalam array kosong. perulangan keempat berada di dalam perulangan pertama dan melakukan perulangan sebanyak panjang matrik unutk mengubah nilai X_{i} dengan nilai yang ditampung didalam array kosong lalu menghitung nilai eror yang dihasilkan kemudian menampilkan nilai X_{i} dan eror yang dihasilkan pada iterasi ke-k.","title":"1. Algoritma Metode Jacobi"},{"location":"SNPL/#2_code_metode_jacobi","text":"Berikut ini merupakan code hasil dari implementasi algoritma di atas: matrik = [ [[ 10 , - 1 , 2 , 0 ],[ \"X1\" ],[ 6 ]], [[ - 1 , 11 , - 1 , 3 ],[ \"X2\" ],[ 25 ]], [[ 2 , - 1 , 10 , - 1 ],[ \"X3\" ],[ - 11 ]], [[ 0 , 3 , - 1 , 8 ],[ \"X4\" ],[ 15 ]], ] true = [ 1 , 2 , - 1 , 1 ] K = [] print ( \"Penyelesaiaan Sistem Persamaan Linear Dari\" ) for i in matrik : print ( i ) print ( \"Menggunakan Metode Jacobi\" ) n = int ( input ( \"Masukkan banyak iterasi : \" )) print ( \"=======================================================\" ) print ( \">>>>>>>>>>>>>>>>>>>>- METODE JACOBI -<<<<<<<<<<<<<<<<<<\" ) print ( \"=======================================================\" ) for i in range ( len ( matrik [ 0 ][ 0 ])): matrik [ i ][ 1 ][ 0 ] = 0 for k in range ( n ): for i in range ( len ( matrik )): sum = matrik [ i ][ 2 ][ 0 ] for j in range ( len ( matrik )): if i == j : continue sum = sum - matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ] K . append ( sum / matrik [ i ][ 0 ][ i ]) print ( f \"iterasi { k + 1 } \" , ' \\t ' , \"|Xi\" , ' \\t\\t\\t ' , \"|errorXi\" ) for x in range ( len ( matrik )): matrik [ x ][ 1 ][ 0 ] = K [ x ] ea = abs (( true [ x ] - K [ x ]) / true [ x ]) * 100 print ( \"X\" + str ( x + 1 ), ' \\t\\t ' , \"| %.10f |\" % K [ x ], ' \\t ' , \" %.10f \" % ea ) K . clear () print ( \"=======================================================\" ) dan hasil ketika program diatas dijalankan sebagai berikut: Penyelesaiaan Sistem Persamaan Linear Dari [[ 10 , - 1 , 2 , 0 ], [ 'X1' ], [ 6 ]] [[ - 1 , 11 , - 1 , 3 ], [ 'X2' ], [ 25 ]] [[ 2 , - 1 , 10 , - 1 ], [ 'X3' ], [ - 11 ]] [[ 0 , 3 , - 1 , 8 ], [ 'X4' ], [ 15 ]] Menggunakan Metode Jacobi Masukkan banyak iterasi : 10 ======================================================= >>>>>>>>>>>>>>>>>>>>- METODE JACOBI -<<<<<<<<<<<<<<<<<< ======================================================= iterasi 1 | Xi | errorXi X1 | 0.6000000000 | 40.0000000000 X2 | 2.2727272727 | 13.6363636364 X3 |- 1.1000000000 | 10.0000000000 X4 | 1.8750000000 | 87.5000000000 iterasi 2 | Xi | errorXi X1 | 1.0472727273 | 4.7272727273 X2 | 1.7159090909 | 14.2045454545 X3 |- 0.8052272727 | 19.4772727273 X4 | 0.8852272727 | 11.4772727273 iterasi 3 | Xi | errorXi X1 | 0.9326363636 | 6.7363636364 X2 | 2.0533057851 | 2.6652892562 X3 |- 1.0493409091 | 4.9340909091 X4 | 1.1308806818 | 13.0880681818 iterasi 4 | Xi | errorXi X1 | 1.0151987603 | 1.5198760331 X2 | 1.9536957645 | 2.3152117769 X3 |- 0.9681086260 | 3.1891373967 X4 | 0.9738427169 | 2.6157283058 iterasi 5 | Xi | errorXi X1 | 0.9889913017 | 1.1008698347 X2 | 2.0114147258 | 0.5707362885 X3 |- 1.0102859039 | 1.0285903926 X4 | 1.0213505101 | 2.1350510072 iterasi 6 | Xi | errorXi X1 | 1.0031986534 | 0.3198653362 X2 | 1.9922412607 | 0.3879369659 X3 |- 0.9945217367 | 0.5478263254 X4 | 0.9944337398 | 0.5566260154 iterasi 7 | Xi | errorXi X1 | 0.9981284734 | 0.1871526582 X2 | 2.0023068816 | 0.1153440776 X3 |- 1.0019722306 | 0.1972230620 X4 | 1.0035943102 | 0.3594310151 iterasi 8 | Xi | errorXi X1 | 1.0006251343 | 0.0625134279 X2 | 1.9986703011 | 0.0664849439 X3 |- 0.9990355755 | 0.0964424487 X4 | 0.9988883906 | 0.1111609410 iterasi 9 | Xi | errorXi X1 | 0.9996741452 | 0.0325854785 X2 | 2.0004476715 | 0.0223835773 X3 |- 1.0003691577 | 0.0369157685 X4 | 1.0006191901 | 0.0619190140 iterasi 10 | Xi | errorXi X1 | 1.0001185987 | 0.0118598691 X2 | 1.9997679470 | 0.0116026495 X3 |- 0.9998281429 | 0.0171857126 X4 | 0.9997859785 | 0.0214021540 =======================================================","title":"2. Code Metode Jacobi"},{"location":"SNPL/#c_metode_gauss_seidel","text":"\u200b Metode Gauss Seidel merupakan sebuah metode yang digunakan untuk menyelesaikan sebuah sistem persamaan liner yang memiliki metode hampir sama dengan metode Jacobi, hanya saja jika pada metode jacobi nilai x_{1} yang didapatkan dari persamaan pertama tidak digunakan untuk menghitung nilai x_{2} dengan persamaan kedua.Dan x_{2} tidak digunakan untuk menghitung nilai x_{3} begitu seterusnya. Jadi pada persamaan Gauss Seidel x_{1} digunakan untuk mencari x_{2} , lalu x_{2} digunakan untuk mencari x_{3} vegitupun seterusnya. Jadi kesimpulannya metode jacobi tidak menggunakan nilai terbaru sedangkan metode gauss seidel menggunkan nilai terbaru. \u200b Secara umum bentuk persamaan aguss seidel dapat dituliskan seperti berikut: x^{(k+1)}_{i} =\\left( b_{i}-\\sum^{i-1}_{j=1}a_{ij}x^{(k+1)}_{j}-\\sum^{n}_{j=i+1}a_{ij}x^{k}_{j} \\right)/a_{ii} Contoh selesaikan sistem persamaan linier berikut: 10a - b + 2c = 6 -a + 11b - c + 3d = 25 2a - b + 10c - d = -11 3b - c + 8d = 15","title":"C. Metode Gauss Seidel"},{"location":"SNPL/#1_algoritma_metode_gauss_seidel","text":"Deklarasikan sistem persamaan linier Deklarasikan nilai X_{i} dari hasil analitik Buat perulangan untuk menampilkan sistem persamaan linier dalam bentuk matrik tentukna banyak iterasi (n) Buat perulangan untuk membuat nilai awal X_{i}=0 Buat perulangan for dalam for (perulangan bersarang) dengan ketentuan: Perulangan pertama melakukan perulangan sebanyak n inputan untuk menentukan berapakali iterasi yang akan di jalankan perulangan kedua berada dalam perulangan pertama dan melakukan perulangan sebanyak panjang dari matrik untuk mengambil hasil nilai di dalam matrik dan mengubah nilai X_{i} menjadi nilai yang dihasilkan dari perulangan ketiga. Perulangan ketiga berada di dalam perulangan kedua dan melakukan perulangan sebanyyak panjang dari matrik untuk mengurangi nilai hasil dengan koefisien yang dikalikan dengan nilai X_{i} dengan mengambil nilai dari matrik. perulangan keempat berada didalam perulangan pertama dan melakukan perulangan sebanyak panjang matrik untuk menghitung nilai eror yang dihasilkan kemudian menampilkan nilai X_{i} dan eror yang dihasilkan pada iterasi ke-k","title":"1. Algoritma Metode Gauss Seidel"},{"location":"SNPL/#2_code_metode_gauss_seidel","text":"berikut ini merupakan code python hasil dari implementasi algoritma di atas matrik = [ [[ 10 , - 1 , 2 , 0 ],[ \"X1\" ],[ 6 ]], [[ - 1 , 11 , - 1 , 3 ],[ \"X2\" ],[ 25 ]], [[ 2 , - 1 , 10 , - 1 ],[ \"X3\" ],[ - 11 ]], [[ 0 , 3 , - 1 , 8 ],[ \"X4\" ],[ 15 ]], ] true = [ 1 , 2 , - 1 , 1 ] print ( \"Penyelesaiaan Sistem Persamaan Linear Dari\" ) for i in matrik : print ( i ) print ( \"Menggunakan Metode Gauss Seidel\" ) n = int ( input ( \"Masukkan banyak iterasi : \" )) print ( \"=======================================================\" ) print ( \">>>>>>>>>>>>>>>>>- METODE GAUSS SEIDEL -<<<<<<<<<<<<<<<\" ) print ( \"=======================================================\" ) for i in range ( len ( matrik [ 0 ][ 0 ])): matrik [ i ][ 1 ][ 0 ] = 0 for k in range ( n ): for i in range ( len ( matrik )): Xi = matrik [ i ][ 1 ][ 0 ] sum = matrik [ i ][ 2 ][ 0 ] for j in range ( len ( matrik )): if j == i : continue sum = sum - matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ] matrik [ i ][ 1 ][ 0 ] = sum / matrik [ i ][ 0 ][ i ] print ( f \"iterasi { k + 1 } \" , ' \\t ' , \"|Xi\" , ' \\t\\t\\t ' , \"|errorXi\" ) for x in range ( len ( matrik )): ea = abs (( matrik [ x ][ 1 ][ 0 ] - true [ x ]) / true [ x ]) * 100 print ( \"X\" + str ( x + 1 ), ' \\t\\t ' , \"| %.10f |\" % matrik [ x ][ 1 ][ 0 ], ' \\t ' , \" %.10f \" % ea ) print ( \"=======================================================\" ) dan ketika program di atas dijalan kan maka outputnya akan seperti berikut: Penyelesaiaan Sistem Persamaan Linear Dari [[ 10 , - 1 , 2 , 0 ], [ 'X1' ], [ 6 ]] [[ - 1 , 11 , - 1 , 3 ], [ 'X2' ], [ 25 ]] [[ 2 , - 1 , 10 , - 1 ], [ 'X3' ], [ - 11 ]] [[ 0 , 3 , - 1 , 8 ], [ 'X4' ], [ 15 ]] Menggunakan Metode Gauss Seidel Masukkan banyak iterasi : 5 ======================================================= >>>>>>>>>>>>>>>>>- METODE GAUSS SEIDEL -<<<<<<<<<<<<<<< ======================================================= iterasi 1 | Xi | errorXi X1 | 0.6000000000 | 40.0000000000 X2 | 2.3272727273 | 16.3636363636 X3 |- 0.9872727273 | 1.2727272727 X4 | 0.8788636364 | 12.1136363636 iterasi 2 | Xi | errorXi X1 | 1.0301818182 | 3.0181818182 X2 | 2.0369380165 | 1.8469008264 X3 |- 1.0144561983 | 1.4456198347 X4 | 0.9843412190 | 1.5658780992 iterasi 3 | Xi | errorXi X1 | 1.0065850413 | 0.6585041322 X2 | 2.0035550169 | 0.1777508452 X3 |- 1.0025273847 | 0.2527384673 X4 | 0.9983509456 | 0.1649054423 iterasi 4 | Xi | errorXi X1 | 1.0008609786 | 0.0860978625 X2 | 2.0002982507 | 0.0149125328 X3 |- 1.0003072761 | 0.0307276102 X4 | 0.9998497465 | 0.0150253509 iterasi 5 | Xi | errorXi X1 | 1.0000912803 | 0.0091280286 X2 | 2.0000213422 | 0.0010671123 X3 |- 1.0000311472 | 0.0031147183 X4 | 0.9999881033 | 0.0011896740 =======================================================","title":"2. Code Metode Gauss Seidel"},{"location":"SNPL/#refrensi","text":"https://id.m.wikipedia.org/wiki/Sistem_persamaan_linear \u21a9 https://www.slideshare.net/KhannalPakinde/makalah-metode-numerik-sistem-persamaan-linear \u21a9","title":"Refrensi"},{"location":"license/","text":"License \u00b6 MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY Support Author \u00b6 Amazon wish list","title":"License"},{"location":"license/#license","text":"MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY","title":"License"},{"location":"license/#support_author","text":"Amazon wish list","title":"Support Author"},{"location":"material-for-mkdocs/","text":"Material for MkDocs \u00b6 MkDocs \u00b6 mkdocs/mkdocs: Project documentation with Markdown - GitHub Material for MkDocs \u00b6 squidfunk/mkdocs-material: A Material Design theme for MkDocs","title":"Material for MkDocs"},{"location":"material-for-mkdocs/#material_for_mkdocs","text":"","title":"Material for MkDocs"},{"location":"material-for-mkdocs/#mkdocs","text":"mkdocs/mkdocs: Project documentation with Markdown - GitHub","title":"MkDocs"},{"location":"material-for-mkdocs/#material_for_mkdocs_1","text":"squidfunk/mkdocs-material: A Material Design theme for MkDocs","title":"Material for MkDocs"},{"location":"extensions/code-hilite/","text":"CodeHilite \u00b6 CodeHilite - Material for MkDocs Supported languages - Pygments Configure mkdocs.yml \u00b6 markdown_extensions: - codehilite","title":"CodeHilite"},{"location":"extensions/code-hilite/#codehilite","text":"CodeHilite - Material for MkDocs Supported languages - Pygments","title":"CodeHilite"},{"location":"extensions/code-hilite/#configure_mkdocsyml","text":"markdown_extensions: - codehilite","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/","text":"Footnote \u00b6 Footnotes - Material for MkDocs Configure mkdocs.yml \u00b6 markdown_extensions: - footnotes Example \u00b6 Footnote example 1. 1 Footnote example 2. 2 One line \u21a9 First line Second line \u21a9","title":"Footnote"},{"location":"extensions/footnote/#footnote","text":"Footnotes - Material for MkDocs","title":"Footnote"},{"location":"extensions/footnote/#configure_mkdocsyml","text":"markdown_extensions: - footnotes","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/#example","text":"Footnote example 1. 1 Footnote example 2. 2 One line \u21a9 First line Second line \u21a9","title":"Example"},{"location":"extensions/mathjax/","text":"MathJax \u00b6 PyMdown - Material for MkDocs Configure mkdocs.yml \u00b6 markdown_extensions: - mdx_math: enable_dollar_delimiter: True Example code \u00b6 $$ P \\c dot Q = \\| P \\|\\| Q \\|\\c os \\a lpha $$ Example rendering \u00b6 P\\cdot Q = \\|P\\|\\|Q\\|\\cos\\alpha","title":"MathJax"},{"location":"extensions/mathjax/#mathjax","text":"PyMdown - Material for MkDocs","title":"MathJax"},{"location":"extensions/mathjax/#configure_mkdocsyml","text":"markdown_extensions: - mdx_math: enable_dollar_delimiter: True","title":"Configure mkdocs.yml"},{"location":"extensions/mathjax/#example_code","text":"$$ P \\c dot Q = \\| P \\|\\| Q \\|\\c os \\a lpha $$","title":"Example code"},{"location":"extensions/mathjax/#example_rendering","text":"P\\cdot Q = \\|P\\|\\|Q\\|\\cos\\alpha","title":"Example rendering"},{"location":"getting-started/docker/","text":"Start with Docker \u00b6 Public docker image \u00b6 Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub docker-compose \u00b6 Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"Start with Docker"},{"location":"getting-started/docker/#start_with_docker","text":"","title":"Start with Docker"},{"location":"getting-started/docker/#public_docker_image","text":"Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub","title":"Public docker image"},{"location":"getting-started/docker/#docker-compose","text":"Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"docker-compose"},{"location":"getting-started/download-boilerplate/","text":"Download boilerplate \u00b6 Git clone \u00b6 git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate Download zip \u00b6 wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#download_boilerplate","text":"","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#git_clone","text":"git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate","title":"Git clone"},{"location":"getting-started/download-boilerplate/#download_zip","text":"wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download zip"},{"location":"getting-started/invoke/","text":"Serve and open with invoke \u00b6 invoke \u00b6 Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution. Serve and open \u00b6 Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml Show all tasks \u00b6 $ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv [ oke ] [ --core-opts ] serve [ --options ] [ other tasks here ... ] Docstring: Serve site and open browser Options: -c STRING, --config-file = STRING Provide a specific MkDocs config -d STRING, --dev-addr = STRING IP address and port to serve documentation locally ( default: localhost:8000 ) Tasks are defined by tasks.py","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#serve_and_open_with_invoke","text":"","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#invoke","text":"Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution.","title":"invoke"},{"location":"getting-started/invoke/#serve_and_open","text":"Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml","title":"Serve and open"},{"location":"getting-started/invoke/#show_all_tasks","text":"$ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv [ oke ] [ --core-opts ] serve [ --options ] [ other tasks here ... ] Docstring: Serve site and open browser Options: -c STRING, --config-file = STRING Provide a specific MkDocs config -d STRING, --dev-addr = STRING IP address and port to serve documentation locally ( default: localhost:8000 ) Tasks are defined by tasks.py","title":"Show all tasks"},{"location":"getting-started/pip/","text":"Start with pip (Anaconda, Miniconda) \u00b6 pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pip/#start_with_pip_anaconda_miniconda","text":"pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pipenv/","text":"Start with pipenv \u00b6 pipenv \u00b6 Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans. Install all packages \u00b6 pipenv sync --dev # Installs all packages specified in Pipfile.lock. Run MkDocs \u00b6 pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve pipenv run \u00b6 pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"Start with pipenv"},{"location":"getting-started/pipenv/#start_with_pipenv","text":"","title":"Start with pipenv"},{"location":"getting-started/pipenv/#pipenv","text":"Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans.","title":"pipenv"},{"location":"getting-started/pipenv/#install_all_packages","text":"pipenv sync --dev # Installs all packages specified in Pipfile.lock.","title":"Install all packages"},{"location":"getting-started/pipenv/#run_mkdocs","text":"pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve","title":"Run MkDocs"},{"location":"getting-started/pipenv/#pipenv_run","text":"pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"pipenv run"},{"location":"hosting-and-deployment/aws-amplify-console/","text":"Host on AWS Amplify Console \u00b6 AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/aws-amplify-console/#host_on_aws_amplify_console","text":"AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/combinations/","text":"Hosting and Deployment \u00b6 GitHub Pages and GitHub \u00b6 Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions GitLab Pages and GitLab \u00b6 Host source code on GitLab. Build and deploy with GitLab CI/CD. Netlify \u00b6 Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify. AWS Amplify Console \u00b6 Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#hosting_and_deployment","text":"","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#github_pages_and_github","text":"Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions","title":"GitHub Pages and GitHub"},{"location":"hosting-and-deployment/combinations/#gitlab_pages_and_gitlab","text":"Host source code on GitLab. Build and deploy with GitLab CI/CD.","title":"GitLab Pages and GitLab"},{"location":"hosting-and-deployment/combinations/#netlify","text":"Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify.","title":"Netlify"},{"location":"hosting-and-deployment/combinations/#aws_amplify_console","text":"Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"AWS Amplify Console"},{"location":"hosting-and-deployment/github-pages/","text":"Host on GitHub Pages \u00b6 Demo site on GitHub Pages (build & deploy with GitHub Actions) Build and deploy with GitHub Actions \u00b6 peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details. Build and deploy with mkdocs gh-deploy \u00b6 pipenv \u00b6 pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#host_on_github_pages","text":"Demo site on GitHub Pages (build & deploy with GitHub Actions)","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#build_and_deploy_with_github_actions","text":"peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details.","title":"Build and deploy with GitHub Actions"},{"location":"hosting-and-deployment/github-pages/#build_and_deploy_with_mkdocs_gh-deploy","text":"","title":"Build and deploy with mkdocs gh-deploy"},{"location":"hosting-and-deployment/github-pages/#pipenv","text":"pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"pipenv"},{"location":"hosting-and-deployment/gitlab-pages/","text":"Host on GitLab Pages \u00b6 See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/gitlab-pages/#host_on_gitlab_pages","text":"See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/netlify/","text":"Host on Netlify \u00b6 Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"},{"location":"hosting-and-deployment/netlify/#host_on_netlify","text":"Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"}]}